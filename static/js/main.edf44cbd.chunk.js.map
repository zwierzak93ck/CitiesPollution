{"version":3,"sources":["components/CountriesSearchField.js","services/DataBase.js","containers/CountriesSearchFieldContainer.js","components/CityInformation.js","containers/CityInformationContainer.js","App.js","store/reducers/rootReducer.js","index.js"],"names":["CountriesSearchField","props","console","log","react_default","a","createElement","Card_default","className","CardContent_default","react_select_esm","value","setValue","options","onChange","isClearable","index_es","onClick","variant","color","loadData","dataBase","Promise","resolve","reject","request","transaction","objectStore","get","onsuccess","result","onerror","error","CountriesSearchFieldContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","countries","label","onValueChange","e","setState","country","getMostPollutedCities","axios","state","then","cities","data","results","map","element","city","setCities","window","indexedDB","open","onupgradeneeded","createObjectStore","keyPath","onblocked","alert","openedDataBase","_this2","onbeforeunload","put","id","CountriesSearchField_CountriesSearchField","Component","connect","dispatch","type","CityInformation","ExpansionPanel_default","expanded","handleChange","ExpansionPanelSummary_default","ExpansionPanelDetails_default","CityInformationComponent","panel","event","getDescription","description","CityInformation_CityInformation","key","Date","now","Math","random","App","containers_CountriesSearchFieldContainer","CityInformationContainer","initialState","rootReducer","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"gSAMaA,EAAuB,SAACC,GAEjC,OADAC,QAAQC,IAAIF,GAEIG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAU,kBACxBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAaG,UAAU,gBACvBJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACAC,MAAOV,EAAMW,SACbC,QAASZ,EAAMY,QACfC,SAAUb,EAAMa,SAChBC,aAAW,KAGPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAaR,UAAU,gBACvBJ,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,QAAShB,EAAMgB,QAASC,QAAQ,YAAYC,MAAM,WAA1D,UCLDC,EAAW,SAACC,GACvB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IACMC,EADcJ,EAASK,YAAY,QAAS,YACtBC,YAAY,SAASC,IAAI,GACrDH,EAAQI,UAAY,kBAAMN,EAAQE,EAAQK,SAC1CL,EAAQM,QAAU,kBAAMP,EAAOC,EAAQO,oCCbvCC,cAEF,SAAAA,EAAYhC,GAAO,IAAAiC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpC,KAMVwC,UAAY,CACR,CAAE9B,MAAO,KAAM+B,MAAO,UACtB,CAAE/B,MAAO,KAAM+B,MAAO,WACtB,CAAE/B,MAAO,KAAM+B,MAAO,UACtB,CAAE/B,MAAO,KAAM+B,MAAO,UAXPR,EA4BnBS,cAAgB,SAACC,GACbV,EAAKW,SAAS,CACVC,QAASF,GAAQ,QA9BNV,EAkCnBa,sBAAwB,WACpBC,IAAMpB,IAAI,4CAA8CM,EAAKe,MAAMH,QAAQnC,MAAQ,sCAClFuC,KAAK,SAACpB,GAEH,IAAMqB,EAASrB,EAAOsB,KAAKC,QAAQC,IAAI,SAAAC,GACnC,OAAOA,EAAQC,OAEnBtD,QAAQC,IAAIgD,GACZjB,EAAKjC,MAAMwD,UAAUN,MAvCzBjB,EAAKe,MAAQ,CACTH,QAAS,MAJEZ,wNDPZ,IAAIZ,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAUiC,OAAOC,UAAUC,KAAK,gCAAiC,GACvEnC,EAAQoC,gBAAkB,WACxBpC,EAAQK,OAAOgC,kBAAkB,QAAS,CAAEC,QAAS,QAEvDtC,EAAQI,UAAY,kBAAMN,EAAQE,EAAQK,SAC1CL,EAAQM,QAAU,kBAAMP,EAAOC,EAAQO,QACvCP,EAAQuC,UAAY,WAClBC,MAAM,4BCcFC,kBAEE9C,EAAS8C,GAAgBhB,KAAK,SAACpB,GACjCqC,EAAKtB,SAAS,CACVC,QAAShB,EAASA,EAAOsB,KAAKN,QAAU,gBAIhDY,OAAOU,eAAiB,WDRC,IAAC/C,EAAU+B,EAAV/B,ECSN6C,EDTgBd,ECSAe,EAAKlB,MDRtC,IAAI3B,QAAQ,SAACC,EAASC,GAC3B,IACMC,EADcJ,EAASK,YAAY,QAAS,aACtBC,YAAY,SAAS0C,IAAI,CAAEC,GAAM,EAAGlB,KAAQA,IACxE3B,EAAQI,UAAY,kBAAMN,EAAQE,EAAQK,SAC1CL,EAAQM,QAAU,kBAAMP,EAAOC,EAAQO,yIC0BrC,OACI5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiE,EAAD,CACI1D,QAASwB,KAAKI,UACd3B,SAAUuB,KAAKM,cACf/B,SAAUyB,KAAKY,MAAMH,QACrB7B,QAASoB,KAAKU,gCAtDcyB,aAmE7BC,cAAQ,KANI,SAACC,GACxB,MAAO,CACHjB,UAAW,SAACN,GAAauB,EAAS,CAACC,KAAM,aAAcxB,cAIhDsB,CAAkCxC,sDCjEpC2C,EAAkB,SAAC3E,GAE5B,OADAC,QAAQC,IAAIF,GAERG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAU,kBAChBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAaG,UAAU,gBACnBJ,EAAAC,EAAAC,cAACuE,EAAAxE,EAAD,CACIyE,SAAU7E,EAAM6E,SAChBhE,SAAUb,EAAM8E,cAEhB3E,EAAAC,EAAAC,cAAC0E,EAAA3E,EAAD,KACID,EAAAC,EAAAC,cAAA,UAAKL,EAAMuD,OAEfpD,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,KACID,EAAAC,EAAAC,cAAA,+BChBd4E,cACF,SAAAA,EAAYjF,GAAO,IAAAiC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,IACfhD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+C,GAAA1C,KAAAH,KAAMpC,KAQV8E,aAAe,SAACI,GAAD,OAAW,SAACC,EAAON,GAC9B5E,QAAQC,IAAIgF,GACZjD,EAAKW,SAAS,CACViC,UAAUA,GAAWK,MAZVjD,EAgBnBmD,eAAiB,WACbrC,IAAMpB,IAAI,mGACLsB,KAAK,SAACpB,GACH5B,QAAQC,IAAI2B,MAhBpBI,EAAKe,MAAQ,CACT6B,SAAU,KACVQ,YAAa,MALFpD,mFAwBfG,KAAKgD,kDAGA,IAAAlB,EAAA9B,KACL,OACIA,KAAKpC,MAAMkD,OAAOG,IAAI,SAAAC,GAClB,OAAOnD,EAAAC,EAAAC,cAACiF,EAAD,CACH/B,KAAMD,EACNiC,IAAKC,KAAKC,MAAQC,KAAKC,SACvBb,aAAcZ,EAAKY,aAAaxB,GAChCuB,SAAUX,EAAKlB,MAAM6B,WAAavB,aAnCfiB,aAgDxBC,cANS,SAACxB,GACrB,MAAO,CACHE,OAAQF,EAAME,SAIPsB,CAAyBS,GCpCzBW,mLAVX,OACEzF,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAACwF,EAAD,MACA1F,EAAAC,EAAAC,cAACyF,EAAD,cANIvB,6BCJZwB,EAAe,CACjB7C,OAAQ,IAeG8C,EAZK,WAAkC,IAAjChD,EAAiCiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAOC,EAAO1B,MACV,IAAK,aACL,OAAOxC,OAAAmE,EAAA,EAAAnE,CAAA,GACAc,EADP,CAEIE,OAAQkD,EAAOlD,SAEnB,QACA,OAAOF,ICLTsD,EAAQC,YAAYP,GAE1BQ,IAASC,OACTtG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAUJ,MAAOA,GACjBnG,EAAAC,EAAAC,cAACsG,EAAD,OAGAC,SAASC,eAAe","file":"static/js/main.edf44cbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { FormControl, TextField, CardActionArea, CardActions, Button } from '@material-ui/core';\r\n\r\nexport const CountriesSearchField = (props) => {\r\n    console.log(props)\r\n    return (\r\n                    <Card className=\"flex-container\">\r\n            <CardContent className=\"card-content\">\r\n            <Select \r\n            value={props.setValue} \r\n            options={props.options} \r\n            onChange={props.onChange} \r\n            isClearable\r\n        />\r\n            </CardContent>\r\n                <CardActions className=\"card-actions\">\r\n                <Button onClick={props.onClick} variant='contained' color='primary'>Get</Button>\r\n                </CardActions>\r\n        </Card>\r\n    )\r\n}","export const openDataBase = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open(\"database - mostPollutedCities\", 1);\r\n      request.onupgradeneeded = () => {\r\n        request.result.createObjectStore('state', { keyPath: 'id' });\r\n      }\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n      request.onblocked = () => {\r\n        alert('Blocked')\r\n      };\r\n    });\r\n  }\r\n\r\n  export const loadData = (dataBase) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = dataBase.transaction('state', 'readonly');\r\n      const request = transaction.objectStore('state').get(1);\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  export const addOrUpdateData = (dataBase, data) => {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = dataBase.transaction('state', 'readwrite');\r\n      const request = transaction.objectStore('state').put({ 'id': 1, 'data': data });\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n","import React, { Component } from 'react';\r\nimport {CountriesSearchField } from '../components/CountriesSearchField';\r\nimport { openDataBase, loadData, addOrUpdateData } from '../services/DataBase';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\nclass CountriesSearchFieldContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            country: null\r\n        }\r\n    }\r\n    countries = [\r\n        { value: 'FR', label: 'France' },\r\n        { value: 'DE', label: 'Germany' },\r\n        { value: 'PL', label: 'Poland' },\r\n        { value: 'ES', label: 'Spain' }\r\n      ]\r\n\r\n      async componentDidMount() {\r\n        var openedDataBase = await openDataBase();\r\n\r\n        await loadData(openedDataBase).then((result) => {\r\n            this.setState({\r\n                country: result ? result.data.country : null\r\n            })\r\n        });\r\n\r\n        window.onbeforeunload = () => { \r\n            addOrUpdateData(openedDataBase, this.state);\r\n        }\r\n        };\r\n\r\n    onValueChange = (e) => {\r\n        this.setState({\r\n            country: e ? e : null\r\n        })\r\n    }\r\n\r\n    getMostPollutedCities = () => {\r\n        axios.get('https://api.openaq.org/v1/cities?country=' + this.state.country.value + '&order_by=count&limit=10&sort=desc')\r\n        .then((result) => {\r\n\r\n            const cities = result.data.results.map(element => {\r\n                return element.city\r\n            })\r\n            console.log(cities)\r\n            this.props.setCities(cities)\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div> \r\n            <CountriesSearchField \r\n                options={this.countries}\r\n                onChange={this.onValueChange}\r\n                setValue={this.state.country}\r\n                onClick={this.getMostPollutedCities}\r\n            />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCities: (cities) => {(dispatch({type: 'SET_CITIES', cities}))}\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CountriesSearchFieldContainer);","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\n\r\n\r\nexport const CityInformation = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Card className=\"flex-container\">\r\n        <CardContent className=\"card-content\">\r\n            <ExpansionPanel\r\n                expanded={props.expanded}\r\n                onChange={props.handleChange}\r\n            >\r\n                <ExpansionPanelSummary>\r\n                    <h2>{props.city}</h2>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <div>\r\n                        Lorem ipsum\r\n                    </div>\r\n                </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n        </CardContent>\r\n    </Card>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {CityInformation} from '../components/CityInformation';\r\nimport axios from 'axios';\r\n\r\nclass CityInformationComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: null,\r\n            description: null\r\n        }\r\n    }\r\n\r\n    handleChange = (panel) => (event, expanded) => {\r\n        console.log(panel)\r\n        this.setState({\r\n            expanded: expanded ? panel : true\r\n        })\r\n    }\r\n\r\n    getDescription = () => {\r\n        axios.get('https://en.wikipedia.org/w/api.php?origin=*&action=query&list=search&srsearch=radom&format=json')\r\n            .then((result) => {\r\n                console.log(result)\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDescription();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.cities.map(element => {\r\n                return <CityInformation \r\n                    city={element}\r\n                    key={Date.now() + Math.random()}\r\n                    handleChange={this.handleChange(element)}\r\n                    expanded={this.state.expanded === element}\r\n                />\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state.cities\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CityInformationComponent);","import React, { Component } from 'react';\nimport CountriesSearchFieldContainer from './containers/CountriesSearchFieldContainer';\nimport CityInformationContainer from './containers/CityInformationContainer';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n              <CountriesSearchFieldContainer />\n              <CityInformationContainer />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\r\n    cities: []\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_CITIES': \r\n        return {\r\n            ...state,\r\n            cities: action.cities\r\n        }\r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport  rootReducer  from './store/reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>\n, \ndocument.getElementById('root')\n);\n\n\n"],"sourceRoot":""}