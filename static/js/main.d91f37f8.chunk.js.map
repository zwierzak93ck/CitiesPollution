{"version":3,"sources":["store/reducers/rootReducer.js","components/CityInformation.js","containers/CityInformationContainer.js","components/CountriesSearchField.js","services/DataBase.js","consts.js","containers/CountriesSearchFieldContainer.js","services/Validation.js","App.js","index.js"],"names":["initialState","informations","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","CityInformation","props","react_default","a","createElement","ExpansionPanel_default","className","expanded","onChange","handleChange","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","name","ExpansionPanelDetails_default","description","CityInformationContainer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","panel","event","setState","_this2","map","CityInformation_CityInformation","indexOf","key","Date","now","Math","random","Component","connect","CountriesSearchField","Card_default","CardContent_default","react_select_esm","value","setValue","options","isClearable","index_es","onClick","variant","color","disabled","validate","loadData","dataBase","Promise","resolve","reject","request","transaction","objectStore","get","onsuccess","result","onerror","error","countries","label","CountriesSearchFieldContainer","onValueChange","e","country","getMostPollutedCities","asyncToGenerator","regenerator_default","mark","_callee","countryPromise","countryResult","citiesNames","wrap","_context","prev","next","axios","all","sent","data","results","element","city","abrupt","stop","getCitiesDescriptions","_ref2","_callee2","i","promise","citiesDescriptions","_context2","push","pages","query","values","extract","_x","apply","setCitiesInformations","_callee3","_context3","window","indexedDB","open","onupgradeneeded","createObjectStore","keyPath","onblocked","alert","openedDataBase","then","onbeforeunload","put","id","CountriesSearchField_CountriesSearchField","inputs","every","dispatch","App","containers_CountriesSearchFieldContainer","containers_CityInformationContainer","store","createStore","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d91f37f8.chunk.js","sourcesContent":["const initialState = {\r\n    informations: null\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CITIES_INFORMATIONS':\r\n            return {\r\n                ...state,\r\n                informations: action.informations\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nexport const CityInformation = (props) => {\r\n    return (\r\n        <ExpansionPanel\r\n            className=\"expansion-panel\"\r\n            expanded={props.expanded}\r\n            onChange={props.handleChange}\r\n        >\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n            >\r\n                <h2 className=\"title\">{props.name} </h2>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <div className=\"description\">\r\n                    {props.description ? props.description : 'Data could not be retrieved from the Wikipedia API'}\r\n                </div>\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CityInformation } from '../components/CityInformation';\r\n\r\nclass CityInformationContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: null\r\n        }\r\n    }\r\n\r\n    handleChange = (panel) => (event, expanded) => {\r\n        this.setState({\r\n            expanded: expanded ? panel : true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.informations.name.map(name => {\r\n                return <CityInformation\r\n                    name={name}\r\n                    description={this.props.informations.description[this.props.informations.name.indexOf(name)]}\r\n                    key={Date.now() + Math.random()}\r\n                    handleChange={this.handleChange(name)}\r\n                    expanded={this.state.expanded === name}\r\n                />\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        informations: state.informations\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CityInformationContainer);","import React from 'react';\r\nimport Select from 'react-select';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardActions, Button } from '@material-ui/core';\r\n\r\nexport const CountriesSearchField = (props) => {\r\n    return (\r\n        <Card className=\"flex-container search-form\">\r\n            <CardContent className=\"card-content\">\r\n                <Select\r\n                    value={props.setValue}\r\n                    options={props.options}\r\n                    onChange={props.onChange}\r\n                    isClearable\r\n                />\r\n            </CardContent>\r\n            <CardActions className=\"card-actions\">\r\n                <Button className=\"button\" onClick={props.onClick} variant='contained' color='primary' disabled={props.validate}>Get Data</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}","export const openDataBase = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open(\"database - mostPollutedCities\", 1);\r\n    request.onupgradeneeded = () => {\r\n      request.result.createObjectStore('state', { keyPath: 'id' });\r\n    }\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = () => reject(request.error);\r\n    request.onblocked = () => {\r\n      alert('Blocked')\r\n    };\r\n  });\r\n}\r\n\r\nexport const loadData = (dataBase) => {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = dataBase.transaction('state', 'readonly');\r\n    const request = transaction.objectStore('state').get(1);\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\r\n\r\nexport const addOrUpdateData = (dataBase, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = dataBase.transaction('state', 'readwrite');\r\n    const request = transaction.objectStore('state').put({ 'id': 1, 'data': data });\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\r\n","export const countries = [\r\n    { value: 'FR', label: 'France' },\r\n    { value: 'DE', label: 'Germany' },\r\n    { value: 'PL', label: 'Poland' },\r\n    { value: 'ES', label: 'Spain' }\r\n]","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { CountriesSearchField } from '../components/CountriesSearchField';\r\nimport { openDataBase, loadData, addOrUpdateData } from '../services/DataBase';\r\nimport { validate } from '../services/Validation';\r\nimport { countries } from '../consts'\r\n\r\nclass CountriesSearchFieldContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            country: null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var openedDataBase = await openDataBase();\r\n\r\n        await loadData(openedDataBase).then((result) => {\r\n            this.setState({\r\n                country: result ? result.data.country : null\r\n            })\r\n        });\r\n\r\n        window.onbeforeunload = () => {\r\n            addOrUpdateData(openedDataBase, this.state);\r\n        }\r\n    };\r\n\r\n    onValueChange = (e) => {\r\n        this.setState({\r\n            country: e ? e : null\r\n        })\r\n    }\r\n\r\n    getMostPollutedCities = async () => {\r\n        const countryPromise = axios.get('https://api.openaq.org/v1/cities?country=' + this.state.country.value + '&order_by=count&limit=10&sort=desc');\r\n        const countryResult = await axios.all([countryPromise]);\r\n\r\n        const citiesNames = countryResult[0].data.results.map((element) => {\r\n            return element.city;\r\n        })\r\n\r\n        return citiesNames;\r\n    }\r\n\r\n    getCitiesDescriptions = async (citiesNames) => {\r\n        const results = [];\r\n\r\n        for (let i = 0; i < citiesNames.length; i++) {\r\n            const promise = axios.get('https://en.wikipedia.org/w/api.php?origin=*&action=query&redirects=1&titles=' +\r\n                citiesNames[i] + '&format=json&prop=extracts&exintro&explaintext');\r\n            const result = await axios.all([promise]);\r\n            results.push(result[0]);\r\n        }\r\n\r\n        const citiesDescriptions = results.map(element => {\r\n            const pages = element.data.query.pages;\r\n            const extracts = Object.values(pages)[0].extract;\r\n            return extracts\r\n        })\r\n\r\n        return citiesDescriptions;\r\n    }\r\n\r\n    setCitiesInformations = async () => {\r\n        const citiesNames = await this.getMostPollutedCities();\r\n        const citiesDescriptions = await this.getCitiesDescriptions(citiesNames);\r\n\r\n        const informations = { name: citiesNames, description: citiesDescriptions };\r\n        this.props.setCitiesInformations(informations);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <CountriesSearchField\r\n                options={countries}\r\n                onChange={this.onValueChange}\r\n                setValue={this.state.country}\r\n                onClick={this.setCitiesInformations}\r\n                validate={validate(this.state.country ? [this.state.country] : [])}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCitiesInformations: (informations) => { (dispatch({ type: 'SET_CITIES_INFORMATIONS', informations })) }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CountriesSearchFieldContainer);","export const validate = (inputs) => {\r\n    return inputs.every(element => {\r\n      return element.length > 0\r\n    });\r\n  }\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CityInformationContainer from './containers/CityInformationContainer';\nimport CountriesSearchFieldContainer from './containers/CountriesSearchFieldContainer';\nimport './stylesheets/rootStyles.scss';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <CountriesSearchFieldContainer />\n        {this.props.informations ?\n          <CityInformationContainer /> : null\n        }\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    informations: state.informations\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './store/reducers/rootReducer'\nimport App from './App';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}